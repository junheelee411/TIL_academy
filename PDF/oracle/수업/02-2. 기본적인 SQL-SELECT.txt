-- ■ EMP 테이블 : 임플로이(EMPLOYEE, 사원) 정보를 가진 테이블
 -- ※ 컬럼 정보
     -- empNo : 사원번호
     -- name : 이름
     -- rrn : 주민번호
     -- hireDate : 입사일
     -- city : 출신도
     -- tel : 전화번호
     -- dept : 부서명
     -- pos : 직위
     -- sal : 급여
     -- bonus : 보너스


-- ■ SELECT 문을 이용한 조회
 -- ※ SELECT 문
     -- 간단한 계산
        SELECT  10 + 5  FROM dual;
        SELECT  10 / 3  FROM dual;

        SELECT  '결과 : ' || (10 + 5)  FROM dual;
 
     -- SELECT 문
        -- 테이블이나 뷰의 정보를 검색
        -- 형식
            -- 테이블의 모든 정보 출력
               SELECT 컬럼명, 컬럼명  FROM 테이블명;

            -- 테이블에서 조건에 만족하는 컬럼의 정보 출력
               SELECT 컬럼명, 컬럼명  FROM 테이블명 WHERE 조건;


   -- ο 테이블 또는 뷰의 전체 레코드(행) 출력
     -- 특정 컬럼 만 출력(emp 테이블 : empNo, name, sal 컬럼)

         -- 테이블목록 확인
             SELECT * FROM tab;

         -- 테이블의 컬럼 확인
             DESC emp;

         -- emp 테이블의 전체 레코드의 컬럼확인
            SELECT *
            FROM emp;

         -- emp 테이블 : empNo, name, sal 컬럼
            SELECT empNo, name, sal
            FROM emp;

            SELECT empNo, name, sal
            FROM emp2;  -- 오류 : ORA-00942, 테이블이 존재하지 않음

            SELECT no, name, sal
            FROM emp;  -- 오류 : ORA-00904, 존재하지 않는 컬럼


     -- 수식 사용
        -- 사번, 이름, 기본급, 보너스, 총급여(기본급+보너스)
           SELECT empNo, name, sal, bonus, sal + bonus
           FROM emp;

         -- 이름, sal
            SELECT name, sal  FROM emp;

            SELECT name || '님', sal  FROM emp;


     -- 모든 컬럼 출력(emp 테이블 : 모든 컬럼 출력)
        SELECT * FROM emp;


     -- 컬럼명을 변경하여 출력(emp 테이블 : empNo, name, sal 컬럼)
         SELECT empNo AS 사번, name AS 이름, sal AS 급여
         FROM emp;

         SELECT empNo 사번, name 이름, sal 급여
         FROM emp;  -- 컬럼의 별명에서 AS 는 생략 가능

         SELECT empNo "사 번", name "이 름", sal "급 여"
         FROM emp; 
             -- 별명에 "(큰타옴표) 사용 가능
             -- 별명에 공백등 특수 문자를 사용하는 경우 "(큰타옴표) 를 사용 해야 함
             -- 별명에 '(작은따옴표)는 사용 할 수 없음

         SELECT empNo, name, sal, bonus, sal+bonus pay  FROM emp;
             -- 일반적으로 수식에서는 별명을 부여
             -- 자바등 프로그램에서는 별명을 사용한 경우 별명으로 값을 넘겨 받는다.


     -- 테이블 명에 별명 부여(emp 테이블 : ROWNUM과 모든 컬럼 출력)
        SELECT empNo, name, sal FROM emp;

        SELECT ROWNUM, empNo, name, sal FROM emp;
            -- ROWNUM : 쿼리의 결과로 나오는 각각의 행들에 순서 값을 나타내는 의사컬럼

        SELECT  *  FROM emp;
        SELECT  ROWNUM, *  FROM emp;  -- 에러. * 와 다른 컬럼 사용 불가

        SELECT  ROWNUM, emp.*  FROM emp;

        SELECT  ROWNUM, e.*  FROM emp e;
               -- 테이블에 별명을 부여하는 경우에는 AS 사용 불가


 -- ※ 조건식과 표현식
   -- ο 비교 연산자 : =, >, <, <=, >=, <>, !=, ^=

     -- emp 테이블 : city가 서울인 자료 중 name, city 컬럼 출력
        SELECT name, city
        FROM emp
        WHERE city = '서울';

     -- emp 테이블: city가 서울이 아닌 자료 중 name, city 컬럼 출력
        SELECT name, city
        FROM emp
        WHERE city != '서울';   -- 부정 : <>, !=, ^=

     -- emp 테이블 : sal+bonus 가 5500000원 이상인 자료 중 name, sal, bonus 컬럼 출력
        SELECT name, sal, bonus
        FROM emp
        WHERE sal + bonus >= 5500000;

      -- col 딕셔너리에서 테이블 이름이 emp 인 컬럼 목록 출력
         DESC col;
         SELECT * FROM col  WHERE tname = 'EMP';
                       -- 문자리터널은 대소문자 구분

      -- sal + bouns 가 5000000 이상인 자료중
          -- name, sal, bonus, sal+bonus 출력
          -- sal+bonus 는 pay라는 이름으로 출력

        SELECT name, sal, bonus, sal + bonus pay
        FROM emp
        WHERE pay >= 5000000; -- 에러. pay 라는 컬럼이 emp 테이블에 없음
               -- 1) FROM 구문 분석
               -- 2) WHERE 구문 분석  -> emp 테이블에 pay 컬럼이 없으므로 에러
               -- 3) SELECT 구문 분석


   -- ο 논리 연산자 : AND, OR, NOT
     -- emp 테이블 : city가 서울이고 sal가 5000000원 이상인 자료 중 empNo, name, city, sal 컬럼 출력
        SELECT empNo, name, city, sal
        FROM emp
        WHERE  city = '서울'  AND  sal >= 5000000;

     -- emp 테이블 : city가 서울, 경기, 인천인 자료 중 empNo, name, city, sal 컬럼 출력
         SELECT empNo, name, city, sal
         FROM emp
         WHERE city='서울' OR city='경기' OR city='인천';        

     -- emp 테이블 : sal가 2000000~3000000을 제외한 자료 중 empNo, name, sal 컬럼 출력
         SELECT empNo, name, sal
         FROM emp
         WHERE  sal < 2000000 OR sal > 3000000;

         SELECT empNo, name, sal
         FROM emp
         WHERE NOT (sal>=2000000 AND sal<=3000000);         

      -- emp 테이블 : 성씨가 ㄱ 씨인 empNo, name, sal 컬럼 출력
         SELECT empNo, name, sal
         FROM emp
         WHERE name > '가' AND name < '나';

     -- emp 테이블 : dept 가 개발부이고 pos가 과장인 empNo, name, dept, pos, sal 컬럼 출력
         SELECT empNo, name, dept, pos, sal
         FROM emp
         WHERE dept = '개발부' AND pos = '과장';

     -- emp 테이블 : sal가 2000000~3000000 사람 중 city가 서울 또는 경기인 empNo, name, city, sal 컬럼 출력
         SELECT empNo, name, city, sal
         FROM emp
         WHERE sal>=2000000 AND sal<=3000000  AND (city = '서울' OR city = '경기');

     -- emp 테이블 : dept 가 개발부 사람 중 pos가 대리 또는 과장인 empNo, name, dept, pos, sal 컬럼 출력

         SELECT empNo, name, dept, pos, sal
         FROM emp
         WHERE dept = '개발부' AND (pos = '대리' OR pos = '과장');


   -- ο 그룹 비교 연산자 : ANY(SOME), ALL
     -- emp 테이블 : city가 '서울', '경기', '인천' 인 자료 중 empNo, name, city 컬럼 출력

         SELECT empNo, name, city, sal
         FROM emp
         WHERE city='서울' OR city='경기' OR city='인천';        

         SELECT empNo, name, city, sal
         FROM emp
         WHERE city  = ANY ('서울', '경기', '인천');        
                -- ANY : 값을 목록의 각 값과 비교 하나라도 만족하면 TRUE(OR와 유사)
        

     -- emp 테이블 : sal가 5000000원 이상인 자료 중 empNo, name, sal 컬럼 출력
        SELECT  empNo, name, sal
        FROM emp
        WHERE sal >= 5000000;

        SELECT  empNo, name, sal
        FROM emp
        WHERE sal >= ANY (5000000, 5500000, 6000000);

     -- emp 테이블 : sal가 6000000원 이상인 자료 중 empNo, name, sal 컬럼 출력

        SELECT  empNo, name, sal
        FROM emp
        WHERE sal >= 6000000;

        SELECT  empNo, name, sal
        FROM emp
        WHERE sal >= ALL (5000000, 5500000, 6000000);         
            -- ALL : 모든 값과 비교하여 모두 만족해야 TRUE(AND 와 유사)


   -- ο SQL 연산자
     -- 1) BETWEEN 조건식
         -- 컬럼 BETWEEN a AND b :  컬럼 >= a AND 컬럼 <= b 처럼 피연산자 범위 안에 있으면 참
         -- BETWEEN 절은 함수 이므로 데이터가 많으면 부하가 걸린다. 따라서 관계연산자가 더 효율적

         -- emp 테이블 : sal가 2000000~3000000 사이 인 자료 중 name, sal 컬럼 출력
            SELECT name, sal  FROM emp  WHERE sal >= 2000000 AND sal <=3000000;
            SELECT name, sal  FROM emp  WHERE sal BETWEEN 2000000 AND 3000000;

         -- emp 테이블 : sal가 2000000~3000000을 제외한 자료 중 name, sal 컬럼 출력
            SELECT name, sal  FROM emp  WHERE sal < 2000000 OR sal > 3000000;

            SELECT name, sal  
            FROM emp
            WHERE sal NOT BETWEEN 2000000 AND 3000000;

         -- emp 테이블 : hireDate가 2024년도인 자료중 name, hireDate 컬럼 출력
            SELECT  name, hireDate
            FROM emp
            WHERE  hireDate  BETWEEN  '2024-01-01' AND '2024-12-31';
                        -- '2024-12-31' 은 출력 되지 않을 수 있음


     -- 2) IN 조건식
         -- IN(값1, 값2, ...) : ( ) 안에 있는 값 중 하나라도 만족하면 TRUE

         -- emp 테이블 : city가 '서울', '인천', '경기' 인  자료 중 name, city 컬럼 출력
            SELECT name, city
            FROM emp
            WHERE city  IN  ('서울', '경기', '인천');

         -- emp 테이블 : city가 '서울', '인천', '경기' 를 제외한  자료 중 name, city 컬럼 출력
            SELECT name, city
            FROM emp
            WHERE city  NOT IN  ('서울', '경기', '인천');
 
         -- emp 테이블 : city와 pos가 '서울  이면서 '부장'이거나 '경기' 이면서 '과장' 인 자료 중 name, city, pos 컬럼 출력

            SELECT name, city, pos
            FROM emp
            WHERE  (city = '서울' AND pos = '부장') OR (city = '경기' AND pos = '과장');

            SELECT name, city, pos
            FROM emp
            WHERE  (city, pos) IN ( ('서울', '부장'), ('경기', '과장') );


         -- emp 테이블 : city와 pos가 '서울' 이면서 '부장' 인 자료 중 name, city, pos 컬럼 출력(subquery)
            
            SELECT 3 + 5 FROM dual;  -- 1개
            SELECT 3 + 5 FROM emp;  -- 60개(60명이 존재하므로)
            SELECT '서울', '부산' FROM dual;

            SELECT name, city, pos
            FROM emp
            WHERE  city = '서울' AND pos = '부장';

            SELECT name, city, pos
            FROM emp
            WHERE  (city, pos) IN ( ('서울', '부장') );

            SELECT name, city, pos
            FROM emp
            WHERE  (city, pos) IN ( SELECT '서울', '부장' FROM dual );
                          -- 서브쿼리 : 쿼리 안에 SELECT 구문이 존재
           
            SELECT name, city, pos
            FROM emp
            WHERE empNo = '1001';

            SELECT name, city, pos
            FROM emp
            WHERE  (city, pos) IN ( SELECT city, pos FROM emp WHERE empNo = '1002' );
                      -- 1002 사원과 동일한 city와 pos 인 사람 출력


     -- 3) LIKE 조건식
         -- 주어진 문자령이 패턴과 일치하는지 여부 확인
         -- '%' : 여러문자 공통(0~N 자)
         -- '_' : 한문자 공통

         -- emp 테이블 : name이 '김'씨인  자료 중 empNo, name 컬럼 출력
            SELECT empNo, name FROM emp;

            SELECT empNo, name FROM emp  WHERE  name  LIKE  '김%';

         -- emp 테이블 : 출생년도가 91, 01 처럼 1로 끝나는 사원중 empNo, name, rrn 출력
            SELECT empNo, name, rrn FROM emp;

            SELECT empNo, name, rrn FROM emp  WHERE  rrn  LIKE   '_1%';

            SELECT empNo, name, rrn FROM emp  WHERE  rrn  LIKE   '___3%';  
                            -- 3월생

         -- emp 테이블 : LIKE 예           
             -- emp 테이블 : tel(전화번호)에 3이 존재하는 모든 자료 출력. 
                    -- name, tel 컬럼

                SELECT name, tel FROM emp  WHERE  tel  LIKE   '%3%';

             -- emp 테이블 : tel(전화번호)이 3으로 끝나는 모든 자료 출력. 
                    -- name, tel 컬럼

                SELECT name, tel FROM emp  WHERE  tel  LIKE   '%3';

             -- emp 테이블 : tel(전화번호)에 3 또는 5가 존재하는 모든 자료 출력. 
                    -- name, tel 컬럼

                SELECT name, tel FROM emp  
                WHERE  tel  LIKE  '%3%' OR tel  LIKE  '%5%';

             -- emp 테이블 : 3월에 태어난 서울, 경기 사람
                    -- name, rrn, city

                SELECT name, rrn, city FROM emp  
                WHERE  rrn  LIKE   '___3%' AND city IN ('서울', '경기');


         -- ESCAPE
             -- '%' 나 '_' 가 포함된 데이터를 검색할때 사용

         -- WITH : 반복적으로 사용되는 쿼리를 블럭화 할 경우 사용
            SELECT  name, sal, bonus, sal+bonus  pay  FROM emp ;
            SELECT  name, sal, bonus, sal+bonus  pay  FROM emp 
            WHERE sal+bonus >= 3000000;

            WITH emp_pay AS (
                 SELECT name, sal, bonus, sal+bonus  pay  FROM emp
            )
            SELECT name, sal,  bonus, pay
            FROM emp_pay
            WHERE pay >= 3000000;

            WITH tb AS (
                SELECT '가가가' name, '우리_나라' content  FROM dual
                UNION ALL
                SELECT '나나나' name, '자바%스프링' content  FROM dual
                UNION ALL
                SELECT '다다다' name, '우리나라' content  FROM dual
                UNION ALL
                SELECT '라라라' name, '모바일' content  FROM dual
                UNION ALL
                SELECT '마마마' name, '안드로이드%모바일' content  FROM dual
            ) 
            SELECT * FROM  tb;

            WITH tb AS (
                SELECT '가가가' name, '우리_나라' content  FROM dual
                UNION ALL
                SELECT '나나나' name, '자바%스프링' content  FROM dual
                UNION ALL
                SELECT '다다다' name, '우리나라' content  FROM dual
                UNION ALL
                SELECT '라라라' name, '모바일' content  FROM dual
                UNION ALL
                SELECT '마마마' name, '안드로이드%모바일' content  FROM dual
            ) 
            SELECT * FROM  tb
            WHERE  content  LIKE  '%바#%%'  ESCAPE '#';
                      -- 바% 검색
                      -- ESCAPE 로 지정한 '#' 뒤에 오는 패턴문자는 일반문자열로 해석되어 검색

   -- ο NULL
      -- 행의 열에 값이 없으면 열은  null 이거나 null을 포함한다고 한다.
      -- 실제 값이 필요 없거나 값이 의미가 없는 경우 null을 사용 한다.
      -- 오라클에서는 문자열 길이가 0인 값도 null 이다.
      -- null은 = 연산자로 비교 하지 않는다.
      -- null 조건식
         수식  IS  [NOT]  NULL

     -- 자바
        -- String s1 = null;
        -- String s2 = "";
        -- int a = s1.length();   // 런타임오류. NullPointerException
        -- int b = s2.length();   // 0

    -- 오라클
        null 과 '' 은 모두 null

      -- 주의사항
          SELECT 10 + NULL FROM dual;   -- NULL

       -- emp 테이블 : tel이 NULL 인 자료 중 name, tel 컬럼 출력
          SELECT name, tel
          FROM emp
          WHERE tel = NULL;  -- (X)

          SELECT name, tel
          FROM emp
          WHERE tel IS NULL;
    
       -- emp 테이블 : tel이 NULL 아닌 자료 중 name, tel 컬럼 출력

          SELECT name, tel
          FROM emp
          WHERE tel IS NOT  NULL;


   -- ο CASE 표현식(Expressions) 과 DECODE 함수
      -- 1) CASE 표현식

      -- 2) 형식1 : 간단한 CASE 표현식
 

      -- 3) 형식2 : 조건 CASE 표현식


     -- 4) DECODE 함수


 -- ※ SELECT 구문의 ALL 과 DISTINCT 옵션
   -- ο ALL 옵션


   -- ο DISTINCT | UNIQUE 옵션



 -- ※ SELECT 구문의 ORDER BY 절
     -- 정렬 예

     -- dept 오름차순 정렬하고 dept가 같으면 남자를 먼저 출력 : name, rrn, dept, sal

     -- dept는 영업부를 먼저 출력 : name, dept

     -- pos 가 부장, 과장, 대리, 사원순으로 출력 : name, dept, pos


     -- 여자를 먼저 출력하고 성별이 동일하면 sal 내림차순 : name, rrn, sal


     -- 서울 사람만 출력하며, 기본급+수당 내림차순으로 정렬 : name, city, sal+bonus


     -- 여자만 출력하며, 부서오름차순으로 정렬하고 부서가 같으면 기본급 내림차순 정렬 : name, rrn, dept, sal


     -- 전화번호가 NULL 인 데이터를 먼저 출력


     -- 전화번호가 NULL 인 데이터를 나중에 출력



 -- ※ 집합 연산자(Set Operators)
     -- UNION : 첫번째 SQL문 결과와 두번째 SQL문 결과중 중복된 데이터는 한번만 출력
        SELECT  name,  city, dept  FROM  emp  WHERE  dept = '개발부';
        SELECT  name,  city, dept  FROM  emp  WHERE  city = '인천';

        SELECT  name,  city, dept  FROM  emp  WHERE  dept = '개발부'
             UNION
        SELECT  name,  city, dept  FROM  emp  WHERE  city = '인천';

     -- UNION ALL : 첫번째 SQL문 결과와 두번째 SQL문 결과중 중복된 데이터도 모두 출력
        SELECT  name,  city, dept  FROM  emp  WHERE  dept = '개발부'
             UNION  ALL
        SELECT  name,  city, dept  FROM  emp  WHERE  city = '인천';

     -- MINUS : 차집합
        SELECT  name,  city, dept  FROM  emp  WHERE  dept = '개발부'
             MINUS
        SELECT  name,  city, dept  FROM  emp  WHERE  city = '인천';

     -- INTERSECT : 교집합
        SELECT  name,  city, dept  FROM  emp  WHERE  dept = '개발부'
             INTERSECT
        SELECT  name,  city, dept  FROM  emp  WHERE  city = '인천';


 -- ※ pseudo 컬럼(의사 컬럼)
   -- ο ROWID


   -- ο ROWNUM

