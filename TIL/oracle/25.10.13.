25.10.13. Mon

데이터베이스란?
: 논리적으로 연관된 자료의 집합체

데이터베이스의 정의
: 통합 데이터, 저장 데이터, 운영 데이터, 공용 데이터

데이터베이스의 특징
: 실시간 접근, 계속적 변화, 동시 공유, 내용에 의한 참조

DBMS이란? 
: 데이터베이스 관리시스템

DBMS의 책임
: 데이터베이스의 구성, 접근방법, 유지관리

기존 파일 처리 방식의 문제
: 종속성, 중복성(일관성, 보안성, 경제성, 무결성 x)

DBMS 필수 기능
: 정의, 조작, 제어

데이터베이스 언어
: 데이터 조작 언어(DML), 데이터 정의 언어(DDL), 데이터 제어 언어(DCL)

SQL(Structured Query Language)
: 구조화 질의어

DML
- 데이터 조작 언어
-INSERT, DELETE, SELECT, MERGE
- ROLLBACK 가능

DDL
- 데이터 정의 언어
- 객체 생성, 변경, 삭제
- ROLLBACK 불가

TCL
- 트랜잭션 제어 언어
- COMMIT, ROLLBACK

SQLPlus
: 오라클 CLI 기반 인터페이스 도구
: SQL 명령어 실행, PL/SQL 블록 실행, DB 관리, 스크립트 실행 등에 사용

# 일반 계정으로 실행
cmd> sqlplus 계정명/"password"
SQL>

# 접속 사용자 확인
SQL> SHOW USER
// USER은 "계정명"입니다

# 접속 계정 변경
SQL> CONN 계정명/"password"
(CONN = connect)

# SQLPlus 종료
SQL> exit

# 관리자 계정으로 실횅
CMD> sqlplus sys/"password" AS SYSDBA

# SYSDBA vs SYS
: SYSDBA는 권한, SYS는 사용자
: SYS - Oracle의 최상위 사용자
: SYSDBA - SYS 사용자나 다른 사용자에게 줄 수 있는 최고 권한

호스트 이름
: 접속할 컴퓨터 ip 주소 / 내 컴퓨터 - localhost

port
: oracle 기본 - 1521 / 실무 - 보안상 다른 포트 사용 필수

sid 
: 오라클 프로그램의 이름

주석
: --

@ 연산자

산술 연산자
: +, -, *, /

문자열 연결 연산자
: ||

DUAL 테이블
: 오라클에 의해 자동으로 생성된 테이블
: dummy 컬럼이 존재, x를 갖고 있는 하나의 레코드가 존재
> SELECT * FROM dual;

@ 테이블 목록

1) USER_TABLES(TABS) 딕셔너리
: 사용자가 소유한 테이블명과 테이블의 테이블스페이스 조회
> SELECT * FROM USER_TABLES;
> SELECT * FROM TABS;

2) TAB 뷰(VIEW): 현재 사용자가 소유한 테이블 목록 조회
> SELECT * FROM TAB;

3) ALL_TABLES
: HR 계정의 테이블에 대한 정보 조회
> SELECT * FROM TABS;

테이블 구조

1) USER_TAB_COLUMNS(COLS) 딕셔너리
: EMP 테이블에 존재하는 모든 컬럼 명, 데이터 타입, 데이터 길이 조회

> SELECT * FROM cols; (모든 테이블의 컬럼 목록 확인)
> SELECT * FROM cols WHERE table_name = '테이블명'; (특정 테이블의 컬럼 목록 확인)

2) COL 뷰(VIEW)
: EMP 테이블에 존재하는 모든 컬럼 명, 데이터 타입, 데이터 길이 조회
> SELECT * FROM col;

3) DESCRIBE(DESC)
> DESC EMP;

@@ SELECT 문을 이용한 조회

SELECT 문
: 테이블이나 뷰의 정보를 검색
: 테이블 또는 뷰의 전체 레코드(행) 출력
: 특정 컬럼만 출력(emp 테이블 : empNo, name, sal 컬럼)

테이블 목록 확인
SELECT * FROM tab;

테이블의 컬럼 확인
DESC emp;

emp 테이블의 전체 레코드의 컬럼 확인
SELECT * FROM emp;

emp 테이블 : empNo, name, sal 컬럼
SELECT empNo,name,sal FROM emp;

> SELECT 컬럼명,컬럼명 FROM 테이블명; (테이블의 모든 정보 출력)
> SELECT 컬럼명.컬럼명 FROM 테이블명 WHERE 조건; (테이블에서 조건에 만족하는 컬럼의 정보 출력)

- 수식 사용

- 모든 컬럼 출력(emp 테이블 : 모든 컬럼 출력)
> SELECT * FROM EMP;

- 컬럼명을 변경하여 출력(emp 테이블 : empNo, name, sal 컬럼)
> SELECT empNo as 사번,name as 이름, sal as 급여 FROM EMP;
> SELECT empNo 사번,name 이름, sal 급여 FROM EMP; -- (컬럼의 별명에서 as는 생략 가능)

> SELECT empNo as "사 번",name as "이 름", sal as "급 여" FROM EMP;
-- 별명에 큰따옴표 사용 가능
-- 별명에 공백 등 특수문자 사용 시 큰따옴표 사용 필수
-- 별명에 작은따옴표 사용 불가

SELECT empNo, name, sal, bonus, sal+bonus pay FROM emp;
-- 일반적으로 수식에는 별명 부여
-- 자바 등 프로그램에서는 별명을 사용하는 경우 별명으로 값을 넘겨받음

-- 테이블 명에 별명 부여(emp 테이블 : ROWNUM과 모든 컬럼 출력)
> SELECT ROWNUM, empNo, name, sal FROM emp;

--ROWNUM : 쿼리의 결과로 나오는 각각의 행들에 순서 값을 나타내는 의사 컬럼
SELECT * FROM emp;
SELECT ROWNUM, * FROM emp; --ORA-00936: 누락된 표현식

SELECT ROWNUM,emp.* FROM emp;

SELECT ROWNUM,e.* FROM emp e; -- 테이블에 별명 부여 시 as 사용 불가

-- ※ 조건식과 표현식
-- ο 비교 연산자 : =, >, <, <=, >=, (<>, !=, ^=)같지 않다
-- emp 테이블 : city가 서울인 자료 중 name, city 컬럼 출력

SELECT name, city
FROM emp
WHERE city = '서울';

-- emp 테이블: city가 서울이 아닌 자료 중 name, city 컬럼 출력
  SELECT name, city
  FROM emp
  WHERE city != '서울';

-- emp 테이블 : sal+bonus 가 5500000원 이상인 자료 중 name, sal, bonus 컬럼 출력

SELECT name,sal,bonus
FROM emp
WHERE sal+bonus >=5500000;

--col 딕셔너리에서 테이블 이름이 emp인 컬럼 목록 출력

select * from col WHERE tname = 'EMP'; -- 문자 리터럴은 대소문자 구분 / tname==tablename

-- sal+bonus가 5000000이상인 자료중
--name,sal,bonus,sal+bonus 출력
--sal+bonus는 pay라는 이름으로 출력

SELECT name,sal,bonus,sal+bonus pay 
FROM emp
WHERE sal+bonus>=5000000;

-- ο 논리 연산자 : AND, OR, NOT
-- emp 테이블 : city가 서울이고 sal가 5000000원 이상인 자료 중 empNo, name, city, sal 컬럼 출력

SELECT empNo, name, city, sal
FROM emp
WHERE city='서울' AND sal>=500000;

-- emp 테이블 : city가 서울, 경기, 인천인 자료 중 empNo, name, city, sal 컬럼 출력

SELECT empNo, name, city, sal
FROM emp
WHERE city='서울' or ' 경기' or '인천'; 


-- emp 테이블 : sal가 2000000~3000000을 제외한 자료 중 empNo, name, sal 컬럼 출력

SELECT empNo, name, sal
FROM emp
WHERE (2000000>sal) or(sal>3000000);

SELECT empNo, name, sal
FROM emp
WHERE not((2000000<=sal) and (sal<=3000000));

emp 테이블 - 성씨가 ㄱ씨인 empNo,name,sal 컬럼 출력

SELECT empNo,name,sal
FROM emp
WHERE ('가'<=name and name< '나');

emp 테이블 - dept가 개발부이고 pos가 과장인 empNo,name,dept,pos,sal 컬럼 출력

SELECT empNo,name,dept,pos,sal
FROM emp
WHERE dept='개발부' and pos='과장';

emp 테이블 - sal가 2000000~3000000인 사람 중 city가 서울 또는 경기인 empNo,name,city,sal 컬럼 출력
SELECT  empNo,name,city,sal
FROM emp
WHERE ((2000000<=sal and sal<=3000000) and (city='서울'or city='경기'));

emp 테이블 - dept가 개발부 사람 중 pos가 대리 또는 과장인 empNo, name,dept,pos,sal 컬럼 출력
SELECT empNo,name,dept,pos,sal
From emp
WHERE dept='개발부' and (pos='대리' or pos='과장');


## 그룹 비교 연산자 : ANY(SOME), ALL
--emp 테이블 : city가 '서울', '경기', '인천' 인 자료 중 empNo, name, city 컬럼 출력
SELECT empNo,name,city
FROM emp
WHERE city= '서울' or city= '경기'or city='인천';

SELECT empNo,name,city
FROM emp
WHERE city= ANY('서울','경기','인천');
-- any - 값을 목록의 각 값과 비교, 하나라도 만족하면 TRUE(or과 유사)

-- emp 테이블 : sal가 5000000원 이상인 자료 중 empNo, name, sal 컬럼 출력

SELECT empNo,name,sal
FROM emp
WHERE sal>=5000000;


-- emp 테이블 : sal가 6000000원 이상인 자료 중 empNo, name, sal 컬럼 출력

SELECT empNo,name,sal
FROM emp
WHERE sal>=any(6000000);

SELECT empNo,name,sal
FROM emp
WHERE sal>=ALL(5000000,5500000,6000000);
-- ALL 모든 값과 비교하여 모두 만족해야 TRUE(AND와 유사)



   -- ο SQL 연산자
     -- 1) BETWEEN 조건식
         -- emp 테이블 : sal가 2000000~3000000 사이 인 자료 중 name, sal 컬럼 출력


         -- emp 테이블 : sal가 2000000~3000000을 제외한 자료 중 name, sal 컬럼 출력


         -- emp 테이블 : hireDate가 2024년도인 자료중 name, hireDate 컬럼 출력



     -- 2) IN 조건식
         -- emp 테이블 : city가 '서울', '인천', '경기' 인  자료 중 name, city 컬럼 출력


         -- emp 테이블 : city가 '서울', '인천', '경기' 를 제외한  자료 중 name, city 컬럼 출력
 

         -- emp 테이블 : city와 pos가 '서울  이면서 '부장'이거나 '경기' 이면서 '과장' 인 자료 중 name, city, pos 컬럼 출력


         -- emp 테이블 : city와 pos가 '서울' 이면서 '부장' 인 자료 중 name, city, pos 컬럼 출력(subquery)
 


     -- 3) LIKE 조건식
         -- emp 테이블 : name이 '김'씨인  자료 중 empNo, name 컬럼 출력
   

         -- emp 테이블 : LIKE 예           



         -- ESCAPE
       
    
         -- WITH : 반복적으로 사용되는 쿼리를 블럭화 할 경우 사용
            WITH tb AS (
                SELECT '가가가' name, '우리_나라' content  FROM dual
                UNION ALL
                SELECT '나나나' name, '자바%스프링' content  FROM dual
                UNION ALL
                SELECT '다다다' name, '우리나라' content  FROM dual
                UNION ALL
                SELECT '라라라' name, '모바일' content  FROM dual
                UNION ALL
                SELECT '마마마' name, '안드로이드%모바일' content  FROM dual
            ) 
            SELECT * FROM  tb;


   -- ο NULL
       -- emp 테이블 : tel이 NULL 인 자료 중 name, tel 컬럼 출력

    
       -- emp 테이블 : tel이 NULL 아닌 자료 중 name, tel 컬럼 출력


   -- ο CASE 표현식(Expressions) 과 DECODE 함수
      -- 1) CASE 표현식

      -- 2) 형식1 : 간단한 CASE 표현식
 

      -- 3) 형식2 : 조건 CASE 표현식


     -- 4) DECODE 함수


 -- ※ SELECT 구문의 ALL 과 DISTINCT 옵션
   -- ο ALL 옵션


   -- ο DISTINCT | UNIQUE 옵션



 -- ※ SELECT 구문의 ORDER BY 절
     -- 정렬 예

     -- dept 오름차순 정렬하고 dept가 같으면 남자를 먼저 출력 : name, rrn, dept, sal

     -- dept는 영업부를 먼저 출력 : name, dept

     -- pos 가 부장, 과장, 대리, 사원순으로 출력 : name, dept, pos


     -- 여자를 먼저 출력하고 성별이 동일하면 sal 내림차순 : name, rrn, sal


     -- 서울 사람만 출력하며, 기본급+수당 내림차순으로 정렬 : name, city, sal+bonus


     -- 여자만 출력하며, 부서오름차순으로 정렬하고 부서가 같으면 기본급 내림차순 정렬 : name, rrn, dept, sal


     -- 전화번호가 NULL 인 데이터를 먼저 출력


     -- 전화번호가 NULL 인 데이터를 나중에 출력



 -- ※ 집합 연산자(Set Operators)
     -- UNION 

     -- UNION ALL

     -- MINUS

     -- INTERSECT


 -- ※ pseudo 컬럼(의사 컬럼)
   -- ο ROWID


   -- ο ROWNUM


