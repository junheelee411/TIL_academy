25.09.08.MON

## 환경변수 설정 목적

실행파일의 경로를 환경변수 path에 세팅 -> 운영체제가 어느 곳에서나 해당 경로에 있는 프로그램 실행 가능

## java VS javac

-javac: .java 확장자를 가진 Java 소스 파일 컴파일 -> .class 확장자를 가진 바이트 코드 파일로 변환(java10부터는 필요x)
-Java : Java 응용 프로그램을 실행(.class로 컴파일된 바이트 코드 JVM(Java Virtual Machine, 자바 가상 머신)에서 실행)

## 실무에서는 java8 버전을 많이씀

## class명 : 대문자로 시작

## 키워드 : 예약어

-기본 자료형, 리터럴, 문장, 클래스, 접근 제어, 특수 변수 및 메소드, 패키지, 예외처리

## 식별자 : 변수 

-영어, 한국어, _, 달러(유니코드 문자)로 시작
-0-9(유니코드 숫자) 사용 가능
-키워드, 공백 x
-대소문자 구분

## 스트림의 특징

-입력스트림/출력스트림
-FIFO
-단방향
-blockig(지연) 가능성 있음

## 이클립스 단축키

alt + 방향키 -> 위치 변경
ctrl + alt + 방향키 -> 복사

## error
-컴파일에러: 문법실수, 실행 전 에러표시됨
-런타임에러: 컴파일 됨, 실행 시 오류(프로그램 강제종료)
-----------------------

## 유효 숫자수 (정수 무조건)

## 16진수
0-9, a-f

## 아스키코드
a==65, A==97

## Scanner.next(), Scanner.nextInt() 공백 처리
이름 ? 
a  a
→ 여러 개의 공백은 하나로 취급(공백 후 남은 입력은 버퍼에 있음)

## next -> 입력 필수. 공백 한칸도 가능, 그냥 엔터 시 빠져나갈 수 없음

##공백,엔터는 next의 구분자(공백or엔터 후 입력 -> 다음 데이터)

		System.out.print("나이 ? ");
		age = sc.nextInt();
		sc.nextLine(); //엔터 읽어서 버림(입력 버퍼 비우기)
		
		System.out.print("생년월일 ? ");
		birth = sc.nextLine();

##sc.nextLine(); //버퍼 비우기 (개행문자 소비)

## 컴퓨터는 2의보수로 연산 - 버리는게 연산 빠르기 때문
