25.09.25. Thur

# 인터페이스
- 선언만 있고 정의가 없는 abstract class의 일종
- 다중 상속 가능 -> 자바의 다중상속 불가 문제점 해결
- interface 키워드 사용하여 선언

## 특징
- 클래스 간 결합도 낮출 수 있음
- 표준화 가능 -> 상속받는 클래스들이 인터페이스의 메소드를 모두 구현해야하기 때문에
- 개발 시간 단축

class <- class
interface <--- interface
interface <- interface

## 작성
필드는 자동으로 public static final 처리됨
메소드는 자동으로 public abstract으로 처리됨

## 구현
인터페이스를 구현한 클래스 -> 추상 클래스가 아니라면 모든 메소드를 재정의(overriding) 해야함
// 람다를 이용하여 구현
Demo6 d2 = () -> System.out.println("disp2");

## 익명 클래스
- 인터페이스 구현 및 객체 생성
- EX06$1.class 형식으로 생성됨

## final 상수 정의
- static final

## enum
- 코드 단순해지고 가독성 높음
- 인스턴스 생성, 상속 방지
- enum 키워드를 통해 구현의 의도가 열거임을 명시

# 예외 처리5.09.25. Thur

# 인터페이스
- 선언만 있고 정의가 없는 abstract class의 일종
- 다중 상속 가능 -> 자바의 다중상속 불가 문제점 해결
- interface 키워드 사용하여 선언

## 특징
- 클래스 간 결합도 낮출 수 있음
- 표준화 가능 -> 상속받는 클래스들이 인터페이스의 메소드를 모두 구현해야하기 때문에
- 개발 시간 단축

class <- class
interface <--- interface
interface <- interface

## 작성
필드는 자동으로 public static final 처리됨
메소드는 자동으로 public abstract으로 처리됨

## 구현
인터페이스를 구현한 클래스 -> 추상 클래스가 아니라면 모든 메소드를 재정의(overriding) 해야함
// 람다를 이용하여 구현
Demo6 d2 = () -> System.out.println("disp2");

## 익명 클래스
- 인터페이스 구현 및 객체 생성
- EX06$1.class 형식으로 생성됨

## final 상수 정의
- static final

## enum
- 코드 단순해지고 가독성 높음
- 인스턴스 생성, 상속 방지
- enum 키워드를 통해 구현의 의도가 열거임을 명시

# 에러

## 컴파일 에러
## 런타임 에러 - 에러 / 예외(checked, unchecked(RuntimeException))
## 논리적 에러 - 엉뚱한 결과

## readLine() : checked exception(IOException)이 발생
- 반드시 예외처리를 해야함

## IOException : 입출력에 문제가 발생하는 경우 발생하는 예외(checked exception)
- checked exception은 메소드를 만들 때 예외를 throws한 예외
- checked exception은 예외처리를 하지 않으면 컴파일 오류 발생

## 문자열을 숫자로 변환하지 못하면
- NumberFormatException이라는 unchecked ecxeption이 발생
