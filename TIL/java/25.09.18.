25.09.18.Thur

# 클래스 복습

## 클래스
-(같은 종류의 집단에 속하는) 속성 + 행위 / 상태 + 동작 / 속성 + 프로시저 / 필드 + 메소드
-객체를 생성하는 틀

## 객체
-개발시간: 레퍼런스 변수
-실행시간: 클래스의 인스턴스(메모리 할당 받음)

## 변수
-필드
-지역변수
-매개변수(파라미터)

## 필드
-인스턴스 변수 + 클래스 변수

## 인스턴스 변수
-객체 수만큼 메모리 할당
-객체에 종속 -> 객체를 통해서만 접근 가능
-힙(heap)에 할당

## 클래스 변수
-클래스가 로딩될 때 한 번만 메모리 할당
-객체 생성과 무관하게 사용 가능
-static 붙여서 선언
-method 영역에 메모리 할당
-프로그램 종료돼야 소멸
-모든 객체가 공동으로 사용해야하는 값에 사용
-클래스명으로 접근, 자기 거면 생략 가능
-ex) System.out

## 레퍼런스 변수
-클래스 변수(인스턴스)에 대한 객체의 주소값(참조값) 가리킴

## null
-레퍼런스형의 유일한 상수값
-가리키고 있는 인스턴스가 없다는 것을 의미

## 메소드
-하나의 메소드 -> 하나의 기능

### 인스턴스 메소드
-객체 생성 후 객체를 이용하여 접근
-인스턴스 변수나 클래스 변수 바로 접근 가능

# Arrays.toString(nn)
-클래스 메소드
-문자열로 출력

# Arrays.sort(num);
-오름차순으로 정렬

# Math.random() * 100 +1
- 1~100 난수

# call by value (값 보냄 -> 값 변경 후 소멸 -> 변경 x)
# call by reference (주소 보냄 -> 값 변경 -> 메인도 값 변경)

# Stack
-LIFO
-Stack 구조 : LIFO
-지역변수, 매개변수는 Stack 영역에 메모리 확보

# 메소드 오버로딩 : 중복 정의
-파라미터 타입이나 개수 다름
-ex) print 이름 하나로 여러 타입 출력 가능

# 오버로딩 된 메소드 중에 하나 고를 때
 1. 매개변수의 타입이 동일한 것을 찾음
 2. 매개변수의 타입이 큰 것 중 가장 작은 것을 찾음

# wrapper class 
-기본형 데이터를 클래스로 처리할 수 있도록 제공되는 클래스
-Byte, Short, Integer, Long, Float, Double, Character, Boolean 등

# 매개변수(파라미터) : 메소드를 정의할때 입력으로 전달된 값을 받는 변수
# 인수(아규먼트) : 메소드를 호출할 때 전달하는 입력값

# .this 참조 변수
-클래스 자기 자신을 뜻하는 키워드
-this 참조 변수 - 해당 인스턴스의 주소를 가리키고 있음 -> 자기 자신에 접근 가능
-모든 인스턴스 메소드 -> this 참조 변수가 숨겨진 지역 변수로 존재 -> 사용 가능
-(클래스 메서드에는 this 변수가 없기 때문에 사용이 불가능)

# 생성자
- 인스턴스 변수 초기화 + 객체가 생성될 때 실행해야할 작업
-리턴타입 가질 수 없음
-인수 가질 수 있으며 중복 정의 가능

## 디폴트 생성자
-public 클래스명(){}
-생성자 하나라도 존재할 시 컴파일러가 만들지 않음

# 이클립스는 저장하면 자동으로 클래스 파일 생성

# 필드와 매개변수(지역변수)의 이름이 동일하면 매개변수(지역변수)가 우선순위가 높다.
-> 이름 겹치는데 필드 변수 사용 원하면 this.변수명

# getter/setter 단축어
- shift + alt + s r a

# VO (value object)
-값을 저장하고 있는 객체

